image: node:lts

stages:
  - upload
  - init
  - test
  # - test-components
  - build
  - publish
  - release

.define_globals: &define_globals |
  shopt -s expand_aliases

.install_playwright: &install_playwright |
  npm i -D @playwright/test
  npx playwright install --with-deps chromium

.start_storybook: &start_storybook |
  PORT=3003 nohup npm run story > .storybook.log &

.start_webgui: &start_webgui |
  PORT=8888 nohup npm run dev > .dev.log &

.install_tools: &install_tools |
  export DEBIAN_FRONTEND=noninteractive
  apt update
  apt -y install debhelper osc zip
  wget http://binaryindex.uib.gmbh/development/opsi-dev-tools/linux/x64/opsi-dev-tools_linux_x64_1.0.79.tar.gz
  tar -xf opsi-dev-tools_linux_x64_1.0.79.tar.gz

.prepare_backend_tests: &prepare_backend_tests |
  apt update
  echo "install stuff"
  apt -y install git
  apt -y install bc wget python3-pip python3-dev python3-venv iproute2 net-tools iputils-ping
  git clone -b devel https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.uib.gmbh/uib/opsiconfd.git

  cd opsiconfd

   # Install debian packages
  export DEBIAN_FRONTEND=noninteractive
  apt update
  apt -y install debhelper osc
  apt -y install python3-dev
  apt -y install mariadb-client bc
  pip3 install --trusted-host pypi.uib.gmbh --index-url http://pypi.uib.gmbh:8080/simple opsi-dev-tools
  pip3 install poetry


  # Grant full database access to opsi user
  mysql --host=mysql --user=root --password=${MYSQL_ROOT_PASSWORD} -e "GRANT ALL ON opsitest.* TO 'opsi'@'%';"

  # Get config files from opsi-server package
  [ -e /etc/opsi ] && rm -r /etc/opsi
  [ -e ../opsi-server ] && rm -r ../opsi-server
  url=$(git remote -v | grep fetch | cut -f2 | sed s'#/opsiconfd.git.*#/opsi-server.git#')
  #branch=$(git rev-parse --abbrev-ref HEAD)
  branch=master
  GIT_TERMINAL_PROMPT=0 git clone --branch $branch $url ../opsi-server
  cp -a ../opsi-server/opsi-server_data/etc /etc/opsi

  # Configure opsiconfd
  mkdir -p /var/lib/opsi/repository /var/lib/opsi/depot

  echo "redis-internal-url = redis://redis" >> tests/data/default-opsiconfd.conf
  echo "log-level-stderr = 0" >> tests/data/default-opsiconfd.conf
  echo "log-level-file = 6" >> tests/data/default-opsiconfd.conf
  echo "log-file = /tmp/opsiconfd.log" >> tests/data/default-opsiconfd.conf
  echo "addon-dirs = [../backend/addon]" >> tests/data/default-opsiconfd.conf

  # Installing opsi test modules file
  mkdir -p /etc/opsi/licenses
  wget --header="Authorization: Bearer ${OPSILICSRV_TOKEN}" "https://opsi-license-server.uib.gmbh/api/v1/licenses/test?usage=opsiconfd-gitlab-ci" -O /etc/opsi/licenses/test.opsilic


  # linking python3 as python for compatibility
  # ln -s /usr/bin/python3 /usr/bin/python

  # Create dirs
  mkdir -p /var/log/opsi/clientconnect
  mkdir -p /var/lib/opsi/public
  mkdir -p /tftpboot

  # Install poetry
  pip3 install poetry
  poetry config experimental.new-installer false
  poetry lock --no-update
  poetry install
  poetry run opsiconfd -c tests/data/default-opsiconfd.conf -l5 setup

  # Create adminuser used in tests
  useradd adminuser
  echo "adminuser:adminuser" | chpasswd
  adduser adminuser opsiadmin

  # Start and wait for redis server
  # redis-server /etc/redis/redis.conf &
  sleep 20

.pytest: &pytest |

  [ -e /tmp/opsiconfd.log ] && rm /tmp/opsiconfd.log
  export OPSICONFD_MAX_SESSIONS_PER_IP=20000
  poetry run opsiconfd -c tests/data/default-opsiconfd.conf &
  sleep 60
  curl -I https://adminuser:adminuser@localhost:4447/admin
  echo "---------------------------------------"
  echo "Run tests"
  echo "---------------------------------------"
  exit_code=0
  pwd
  ls -la
  ls -la ../backend
  ls -la ../backend/addon
  # cp -R ../backend/tests
  poetry run pytest  --tb=short -v ../backend/tests || exit_code=$?
  if [ $exit_code -ne 0 ]; then
    echo "---------------------------------------"
    echo "opsiconfd log"
    echo "---------------------------------------"
    cat /tmp/opsiconfd.log
    exit $exit_code
  fi

.get_changed_files: &get_changed_files |
  cd uib-components
  changedFiles=$(git diff origin/main -r --no-commit-id --name-only | grep -i -P 'stories.js|test.component.js|test.unit.js|.vue' | grep -v 'test.component.js-snapshot')
  echo "$changedFiles"
  basenames=$(basename -s .stories.js $(basename -s .test.component.js $(basename -s .vue -a $changedFiles)))
  echo "$basenames"
  testfilesUnique=$(echo $basenames | tr ' ' '\n' | awk '!a[$0]++')
  # todo checking if each file in testfilesUnique exists
  echo "$testfilesUnique"
  cd ..

#########################################################################
######################################################################### init
#########################################################################
init:npm:
  stage: init
  script:
    - cd opsiweb
    - *define_globals
    - npm i
    - du -h --max-depth=0 node_modules # just for checking node_modules size (locally computed: 674M; CICD: 801M)
  artifacts:
    paths:
      - opsiweb/package.json
      - opsiweb/node_modules/
      - opsiweb/uib-components/
    expire_in: 1 day

init:npm:production:
  stage: init
  only:
    - main
    - tags
  script:
    - cd opsiweb
    - *define_globals
    - npm --production --only=prod i # Todo: whats the difference between --production and --only=prod
    - du -h --max-depth=0 node_modules # just for checking node_modules size (locally computed 251M; CICD: 360M)
  artifacts:
    paths:
      - opsiweb/package.json
      - opsiweb/node_modules/
      - opsiweb/uib-components/
    expire_in: 1 day


#########################################################################
######################################################################### test
#########################################################################
test:lint:
  stage: test
  dependencies:
    - init:npm
  before_script:
    - cd opsiweb
    - ls -lah .
    - ls -lah node_modules/
    - npm --version
    - *define_globals
  script:
    - npm run lint

# test:unit:
  #   stage: test
  #   dependencies:
  #     - init:npm
  #   script:
  #     - cd opsiweb
  #     - *define_globals
  #     - npm run test:unit
  #   allow_failure: true
  #   coverage: /All files\s*\|\s*([\d\.]+)/
  #   artifacts:
  #     expire_in: 1 day
  #     reports:
  #       coverage_report:
  #         coverage_format: cobertura
  #         path: opsiweb/coverage/clover.xmlci

test:accessibility:
  image: mcr.microsoft.com/playwright:v1.38.0-jammy
  stage: test
  dependencies:
    - init:npm
  before_script:
    - cd opsiweb
    - *start_webgui
  script:
    - npm run test:all:accessibility || exit_code=$?
  after_script:
    - npm run test:all:delete-empty-results
    - exit $exit_code
  allow_failure: true
  artifacts:
    name: "opsi-webgui-test-result-accessibility"
    when: on_failure
    paths:
      - ./**/*/test-results/
      - opsiweb/.dev.log
    reports:
      junit: opsiweb/.config/test-result-pw-reporter-accessibility.xml
    expire_in: 1 day
test:usecase:
  image: mcr.microsoft.com/playwright:v1.38.0-jammy
  stage: test
  dependencies:
    - init:npm
  before_script:
    - cd opsiweb
    - *define_globals
    - *install_playwright
    - *start_webgui
  script:
    # - npm run test:all:usecase || exit_code=$?
    - npm run test:all:usecase || exit_code=$?
  after_script:
    - npm run test:all:delete-empty-results
    - exit $exit_code
  allow_failure: true
  only:
    - main
    - tags
  artifacts:
    name: "opsi-webgui-test-result-usecase"
    when: on_failure
    paths:
      - ./**/*/test-results/
      - opsiweb/.dev.log
    reports:
      junit: opsiweb/.config/test-result-pw-reporter-usecase.xml
    expire_in: 1 day

test:components:changes:
  image: mcr.microsoft.com/playwright:v1.15.2-focal
  stage: test
  dependencies:
    - init:npm
  except:
    - cicd
    - tags # cause in tags we test all browsers (and all files)
    - main # cause in main we test all files
  only:
    changes:
      - opsiweb/pages/*
      - opsiweb/components/*
      - opsiweb/uib-components/*
  before_script:
    - cd opsiweb
    - *define_globals
    - *install_playwright
    - *get_changed_files
    - echo "$testfilesUnique"
    - *start_storybook
    - *start_webgui
    - sleep 120
  script:
    - npm run test:all:components $testfilesUnique || exit_code=$?
  after_script:
    - npm run test:all:delete-empty-results
    - exit $exit_code
  allow_failure: true
  artifacts:
    name: "opsi-webgui-test-result-components"
    when: on_failure
    paths:
      - ./**/*/test-results/
      - opsiweb/.storybook.log
      - opsiweb/.dev.log
    reports:
      junit: ./opsiweb/.config/test-result-pw-reporter-components.xml
    expire_in: 1 day

test:components:
  image: mcr.microsoft.com/playwright:v1.15.2-focal
  stage: test
  dependencies:
    - init:npm
  only:
    - main # cause in main we test all files, but only chromium browser
    - tags
  before_script:
    - cd opsiweb
    - *define_globals
    - *install_playwright
    - *start_storybook
    - *start_webgui
    - sleep 60
  script:
    - npm run test:all:components | tee .tmpRESULT
    - exit_code=${PIPESTATUS[0]}
    - exit $exit_code
  after_script:
    - cd opsiweb
    - scripts/playwright_coverage.sh .tmpRESULT
    - npm run test:all:delete-empty-results
  allow_failure: true
  coverage: /TESTED FILES\s*:\s*([^%]+)/
  artifacts:
    name: "opsi-webgui-test-result-components"
    when: on_failure
    paths:
      - ./**/*/test-results/
      - opsiweb/.storybook.log
      - opsiweb/.dev.log
      - opsiweb/.tmpRESULT
    reports:
      junit: ./opsiweb/test-result-pw-reporter-components.xml
    expire_in: 3 day

# test:test-components:all-variants:
  #   image: mcr.microsoft.com/playwright:v1.15.2-focal
  #   stage: test
  #   dependencies:
  #     - init:npm
  #   except:
  #     - cicd
  #   only:
  #     - tags # cause in tags we test each file and browser
  #   script:
  #     - cd opsiweb
  #     #- *define_globals
  #     - npm i -D @playwright/test
  #     - npx playwright install
  #     - npx playwright install-deps
  #     - PORT=3003 nohup npm run dev > .dev.log &
  #     - PORT=3003 nohup npm run story > .storybook.log &
  #     - sleep 60
  #     - npm run test:all:components-devices || exit_code=$?
  #     - npm run test:all:delete-empty-results
  #     - exit $exit_code
  #   # allow_failure: true
  #   artifacts:
  #     name: "opsi-webgui-test-result-components"
  #     when: on_failure
  #     paths:
  #       - ./**/*/test-results/
  #       - opsiweb/.storybook.log
  #       - opsiweb/.dev.log
  #     reports:
  #       junit: ./opsiweb/test-result-pw-reporter-components.xml
  #     expire_in: 2 day

test:backend-pytest:
  image: docker.uib.gmbh/opsi/dev/pybuilder:uib-python-3.11
  services:
    - name: mysql:latest
      command:
        - --max_connections=1000
        - --default-authentication-plugin=mysql_native_password
    - name: redislabs/redistimeseries:latest
      alias: redis
  variables:
    MYSQL_ROOT_PASSWORD: "opsi"
    MYSQL_DATABASE: "opsitest"
    MYSQL_USER: "opsi"
    MYSQL_PASSWORD: "opsi"
  script:
    - *prepare_backend_tests
    - echo "##########################################"
    - echo "##################pytest##################"
    - echo "##########################################"
    - *pytest
  allow_failure: true ##### TODO remove again

#########################################################################
######################################################################### build
#########################################################################
build:screenshots:docs:
  image: mcr.microsoft.com/playwright:v1.15.2-focal
  stage: test
  dependencies:
    - init:npm
    # - tags # screenshots only for tags
  only:
    - main # cause in main we test all files, but only chromium browser
    - tags
  before_script:
    - cd opsiweb
    - *define_globals
    - *install_playwright
    - *start_storybook
    - *start_webgui
  script:
    - cd screenshots4Docs
    - npx playwright test -c playwright-screenshots.config.js take_screenshots/  || exit_code=$?
  after_script:
    - exit $exit_code
  allow_failure: true
  artifacts:
    name: "opsi-webgui-screenshots-docs-result"
    when: always
    paths:
      - opsiweb/screenshots4Docs/screenshots
      - ./**/*/test-results/
      - opsiweb/.storybook.log
      - opsiweb/.dev.log
    expire_in: 7 day

build:static:app:
  stage: build
  dependencies:
    - init:npm:production
    - test:lint
  script:
    - cd opsiweb
    - npm i @nuxt/typescript-build
    - *define_globals
    - npm run generate-nossl
  artifacts:
    paths:
      - opsiweb/dist # not used...?
    expire_in: 1 day
  only:
    - main
    - tags

build:addon:
  stage: build
  dependencies:
    - init:npm:production # doesnt download artifacts from static-app
    - build:static:app
  script:
    - *install_tools
    - pwd && ls -la opsiweb
    - cd opsiweb # generate dist
    - npm i @nuxt/typescript-build  # quick fix, cause this lib cant be found in
    - *define_globals
    - npm run generate-nossl
    - cd .. # copy to addon
    - mkdir -p backend/addon/webgui/data
    - mkdir -p backend/addon/webgui/data/app
    - cp -r opsiweb/dist/* backend/addon/webgui/data/app/
    - mkdir webgui
    - cp -r backend/addon/webgui/* webgui/
    - ls -lah webgui # debug
  only:
    - tags
    - main
  artifacts:
    name: "opsi-webgui"
    paths:
      - webgui
    expire_in: 3 day

#########################################################################
######################################################################### create tag
#########################################################################

.compare_versions: &compare_versions |
  # "compare Versions in: opsi-dev-tool-yml and opsiweb/package.json"
  VERSION_YML=$(cat opsi-dev-tool.yml | grep "project_version " | awk -F "project_version " '{print $2}')
  VERSION_JSN=$(cat opsiweb/package.json | grep "\"version\": " | awk -F "\"" '{print $4}')
  if [ "$VERSION_YML" != "$VERSION_JSN" ]; then echo "Versions do not match for opsi-dev-tool-yml and opsiweb/package.json"; exit 1; else echo "Versions equal: $VERSION_YML"; fi
  TAG=$VERSION_YML

.prepare_tag: &prepare_tag |
  # "prepare tag"
  if git show-ref --tags $TAG --quiet; then echo "Tag '$TAG' already exists."; else echo "Tag not yet exists '$TAG'"; fi
  # if git show-ref --tags $TAG --quiet; then echo "Tag '$TAG' already exists."; exit 2; else echo "Tag not yet exists '$TAG'"; fi
  git log --branches=[main] --no-decorate --oneline $(git describe --tags --abbrev=0 @^)..@  | grep -e "\[*pub*\]" > $FILE_TMP

.push_tag: &push_tag |
  # post tag
  curl --request POST \
    --header "PRIVATE-TOKEN: $TOKEN_SUCHER" \
    --url "https://gitlab.uib.gmbh/api/v4/projects/$CI_PROJECT_ID/repository/tags?tag_name=$TAG&ref=main&message=$(cat $FILE)"


.prepare_git: &prepare_git |
  # "prepare git"
  git config --global user.name "${GITLAB_USER_NAME}"
  git config --global user.email "${GITLAB_USER_EMAIL}"

upload:gittag:
  stage: upload
  # dependencies:
  #   - build:static:app
  script:
    - FILE=".tmp_changelog"
    - FILE_TMP=".tmp_cl"
    - *prepare_git
    - *install_tools
    # - TAG=$(git describe --tags --abbrev=0 @^) # latest tag
    - *compare_versions
    - *prepare_tag
    - awk '{$1=""}1' $FILE_TMP | awk '{$1=$1}1' | sort
    - awk '{$1=""}1' $FILE_TMP | awk '{$1=$1}1' | sort > $FILE
    - rm -f $FILE_TMP
    - cat $FILE
    - echo "$TAG"
    - *push_tag
    # - git tag -a $TAG -m "$(cat $FILE)"
    # - git push --tags https://$GITLAB_USER_NAME:${TOKEN_SUCHER}@gitlab.uib.gmbh/uib/opsiweb-ui.git HEAD:main
    - rm $FILE
    # - opsi-dev-cli -l 5 changelog from-git output
    # - ./opsi-dev-tool --create-changelog output
    #- git tag -a
  # when: manual # triggered manually
  when: always # triggered manually
  only: # visible in this branches: (main!)
    - cicd

#########################################################################
######################################################################### publish
#########################################################################
publish:git:
  stage: publish
  # image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG                 # Run this job when a tag is created
  script:
    - echo "running release_job"
  release:                               # See https://docs.gitlab.com/ee/ci/yaml/#release for available properties
    tag_name: '$CI_COMMIT_TAG'
    description: '$CI_COMMIT_TAG'
# publish:obs_int:
#   stage: publish
#   dependencies:
#     - build:static:app
#   script:
#     - *install_tools
#     - ./opsi-dev-tool -l debug --obs-update-package https://obs.uib.gmbh home:uibmz:opsi:4.3:development
#   only:
#     - tags

# publish:obs_ext:
#   stage: publish
#   dependencies:
#     - build:static:app
#   script:
#     - *install_tools
#     - ./opsi-dev-tool -l debug --obs-update-package https://build.opensuse.org home:uibmz:opsi:4.3:development
#     # - opsi-dev-cli -l 5 changelog from-git output
#     # - opsi-dev-cli release-service register-package-version opsi-webgui SERVER_PACKAGE --changelog-file output/changelog.md
#     # - opsi-dev-cli release-service push-repository-state opsi-webgui SERVER_PACKAGE SERVER_PACKAGE-4.3-development
#   only:
#     - tags
#   artifacts:
#     name: "opsi-webgui-changelogs"
#     paths:
#       - output
#     expire_in: 1 day
#   # Copy to experimental
#   # Local: osc -A https://api.opensuse.org copypac home:uibmz:opsi:4.3:development opsi-webgui home:uibmz:opsi:4.3:experimental
#   # alternative install: http://obs.uib.local:82/home:/uibmz:/opsi:/4.3:/development/Debian_10/

# publish:binary-index:
#   stage: publish
#   dependencies:
#     - build:addon
#   script:
#     - *install_tools
#     - ls -la
#     - ls -la webgui
#     - ./opsi-dev-tool -l debug --binary-push webgui opsi-webgui linux x64 ${CI_COMMIT_TAG}
#   only:
#     - tags

# # release:experimental:
#   #   stage: release
#   #   when: manual
#   #   before_script:
#   #     - "which ssh-agent || (apt update && apt -y install openssh-client)"
#   #     - mkdir -p ~/.ssh
#   #     - eval $(ssh-agent -s)
#   #     - ssh-add <(echo "$DOWNLOAD_UIB_PRIVATE_KEY")
#   #   dependencies:
#   #     - publish:obs_ext
#   #     - publish:binary-index
#   #   script:
#   #     - *install_tools
#   #     - ./opsi-dev-tool -l debug --binary-pull
#   #     - scp -o StrictHostKeyChecking=no -r opsi-webgui_${CI_COMMIT_TAG}.zip "$DOWNLOAD_UIB_USER@download.uib.de:/var/www/opsi/htdocs/opsi4.2/experimental/opsiconfd-addons/"
#   #     - ./opsi-dev-tool -l debug --obs-api-conf $OBS_EXT_URL $OBS_EXT_USERNAME $OBS_EXT_PASSWORD
#   #     - osc -A https://api.opensuse.org copypac home:uibmz:opsi:4.2:development opsi-webgui home:uibmz:opsi:4.3:experimental
#   #   only:
#   #     - tags
#   #publish:obs_int:
#   #  stage: publish
#   #  dependencies:
#   #    - build:static:app
#   #  script:
#   #    - *install_tools
#   #    - ./opsi-dev-tool -l debug --obs-update-package https://obs.uib.gmbh home:uibmz:opsi:4.2:development
#   #  only:
#   #    - tags

# # publish:obs_ext:
#   #   stage: publish
#   #   dependencies:
#   #     - build:static:app
#   #   script:
#   #     - *install_tools
#   #     - ./opsi-dev-tool -l info --obs-update-package https://build.opensuse.org home:uibmz:opsi:4.2:development
#   #   when: manual
#   #   only:
#   #    - tags
