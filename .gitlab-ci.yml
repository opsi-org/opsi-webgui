
image: node:lts
stages:
  - init
  - test
  # - test-components
  - build
  - publish

.prepare_repo: &prepare_repo |
  # BRANCH=$(git symbolic-ref --short HEAD || echo "develop")
  BRANCH=$(echo ${CI_COMMIT_BRANCH} || echo "develop")
  echo "CIC_Branch ${CI_COMMIT_BRANCH}"
  echo "GIT_Branch $BRANCH"

  echo "exec: git ls-remote --exit-code --heads https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.uib.gmbh/uib/opsiweb-ui-components.git ${BRANCH}"

  git_result=$(git ls-remote --heads https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.uib.gmbh/uib/opsiweb-ui-components.git ${BRANCH} | wc -l)
  echo "gitresult $git_result"
  if [ $git_result -eq 0 ]; then
    echo "Use default branch"
    BRANCH=develop
    echo "GIT_Branch $BRANCH"
  fi
  echo "GIT_Branch1 $BRANCH"
  BRANCH=$(echo ${BRANCH} || echo "develop")
  echo "GIT_Branch2 $BRANCH"

  # git clone --branch ${CI_COMMIT_BRANCH} https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.uib.gmbh/uib/opsiweb-ui-components.git opsiweb/uib-components
  # Testing using current branch (othewise job failes on "tag"-execution)

  git clone --branch $BRANCH https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.uib.gmbh/uib/opsiweb-ui-components.git opsiweb/uib-components
  cd opsiweb/uib-components
  git branch -a
  ls -lah
  cd -

.define_globals: &define_globals |
  npm i -g dry-dry
  shopt -s expand_aliases
  alias npm-uib='dry --dry-save-package-json-to package-merged.json --dry-keep-package-json'
  cd uib-components
  git branch
  cd -

.install_tools: &install_tools |
  export DEBIAN_FRONTEND=noninteractive
  apt update
  apt -y install debhelper osc
  wget http://binaryindex.uib.gmbh/development/opsi-dev-tools/linux/x64/opsi-dev-tools_linux_x64_1.0.79.tar.gz
  tar -xf opsi-dev-tools_linux_x64_1.0.79.tar.gz

.prepare_backend_tests: &prepare_backend_tests |
  apt update
  echo "install stuff"
  apt -y install git
  apt -y install bc wget python3-pip python3-dev python3-venv iproute2 net-tools iputils-ping
  git clone -b devel https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.uib.gmbh/uib/opsiconfd.git

  cd opsiconfd

   # Install debian packages
  export DEBIAN_FRONTEND=noninteractive
  apt update
  apt -y install debhelper osc
  apt -y install python3-dev
  apt -y install mariadb-client bc
  pip3 install --trusted-host pypi.uib.gmbh --index-url http://pypi.uib.gmbh:8080/simple opsi-dev-tools
  pip3 install poetry


  # Grant full database access to opsi user
  mysql --host=mysql --user=root --password=${MYSQL_ROOT_PASSWORD} -e "GRANT ALL ON opsitest.* TO 'opsi'@'%';"

  # Get config files from opsi-server package
  [ -e /etc/opsi ] && rm -r /etc/opsi
  [ -e ../opsi-server ] && rm -r ../opsi-server
  url=$(git remote -v | grep fetch | cut -f2 | sed s'#/opsiconfd.git.*#/opsi-server.git#')
  #branch=$(git rev-parse --abbrev-ref HEAD)
  branch=master
  GIT_TERMINAL_PROMPT=0 git clone --branch $branch $url ../opsi-server
  cp -a ../opsi-server/opsi-server_data/etc /etc/opsi

  # Configure opsiconfd
  mkdir -p /var/lib/opsi/repository /var/lib/opsi/depot

  echo "redis-internal-url = redis://redis" >> tests/data/default-opsiconfd.conf
  echo "log-level-stderr = 0" >> tests/data/default-opsiconfd.conf
  echo "log-level-file = 6" >> tests/data/default-opsiconfd.conf
  echo "log-file = /tmp/opsiconfd.log" >> tests/data/default-opsiconfd.conf
  echo "addon-dirs = [../backend]" >> tests/data/default-opsiconfd.conf

  # Installing opsi test modules file
  mkdir -p /etc/opsi/licenses
  wget --header="Authorization: Bearer ${OPSILICSRV_TOKEN}" "https://opsi-license-server.uib.gmbh/api/v1/licenses/test?usage=opsiconfd-gitlab-ci" -O /etc/opsi/licenses/test.opsilic


  # linking python3 as python for compatibility
  # ln -s /usr/bin/python3 /usr/bin/python

  # Create dirs
  mkdir -p /var/log/opsi/clientconnect
  mkdir -p /var/lib/opsi/public
  mkdir -p /tftpboot

  # Install poetry
  pip3 install poetry
  poetry config experimental.new-installer false
  poetry lock --no-update
  poetry install
  poetry run opsiconfd -c tests/data/default-opsiconfd.conf -l5 setup

  # Create adminuser used in tests
  useradd adminuser
  echo "adminuser:adminuser" | chpasswd
  adduser adminuser opsiadmin

  # Start and wait for redis server
  # redis-server /etc/redis/redis.conf &
  sleep 20

.pytest: &pytest |

  [ -e /tmp/opsiconfd.log ] && rm /tmp/opsiconfd.log
  export OPSICONFD_MAX_SESSIONS_PER_IP=20000
  poetry run opsiconfd -c tests/data/default-opsiconfd.conf &
  sleep 60
  curl -I https://adminuser:adminuser@localhost:4447/admin
  echo "---------------------------------------"
  echo "Run tests"
  echo "---------------------------------------"
  exit_code=0
  pwd
  ls -la
  ls -la ../backend
  # cp -R ../backend/tests
  poetry run pytest ../backend/tests || exit_code=$?
  if [ $exit_code -ne 0 ]; then
    echo "---------------------------------------"
    echo "opsiconfd log"
    echo "---------------------------------------"
    cat /tmp/opsiconfd.log
    exit $exit_code
  fi

#########################################################################
######################################################################### init
#########################################################################
init:dry:
  stage: init
  script:
    - *prepare_repo
    - cd opsiweb
    - *define_globals
    - npm-uib i
    - du -h --max-depth=0 node_modules # just for checking node_modules size (locally computed: 674M; CICD: 801M)
  artifacts:
    paths:
      - opsiweb/node_modules/
      - opsiweb/uib-components/
    expire_in: 1 day

init:dry:production:
  stage: init
  script:
    - *prepare_repo
    - cd opsiweb
    #- #rm package-lock.json # todo: how to? rm here or not include to repo? (currently not included)
    - *define_globals
    - npm-uib --production --only=prod i # Todo: whats the difference between --production and --only=prod
    - du -h --max-depth=0 node_modules # just for checking node_modules size (locally computed 251M; CICD: 360M)
  artifacts:
    paths:
      - opsiweb/node_modules/
      - opsiweb/uib-components/
    expire_in: 1 day
#

# node_modules sizes (locally)


#########################################################################
######################################################################### test
#########################################################################
test:lint:
  stage: test
  dependencies:
    - init:dry
  script:
    - cd opsiweb
    - ls -lah .
    - ls -lah node_modules/
    - npm --version
    - *define_globals
    - npm-uib run lint

test:test-unit:
  stage: test
  dependencies:
    - init:dry
  script:
    - cd opsiweb
    - *define_globals
    - npm-uib run test:unit
  coverage: /All files\s*\|\s*([\d\.]+)/
  artifacts:
    reports:
      cobertura: opsiweb/coverage/clover.xmlci

test:test-e2e:
  image: mcr.microsoft.com/playwright:v1.15.2-focal
  stage: test
  dependencies:
    - init:dry
  script:
    - cd opsiweb
    - ls -lah uib-components
    - *define_globals
    - npm-uib i -D @playwright/test
    - npx playwright install
    - PORT=8888 nohup dry --dry-save-package-json-to package-merged.json --dry-keep-package-json run dev &
    - sleep 60
    - echo $PLAYWRIGHT_BROWSERS_PATH
    - npm-uib run test:all:e2e || exit_code=$?
    - npm-uib run test:all:delete-empty-results
    - exit $exit_code
  allow_failure: true
  artifacts:
    name: 'opsi-webgui-test-result-e2e'
    when: on_failure
    paths:
      - ./**/*/test-results/
    reports:
      junit: ./opsiweb/test-result-pw-reporter-e2e.xml
    expire_in: 2 day

test:test-components:
  image: mcr.microsoft.com/playwright:v1.15.2-focal
  stage: test
  dependencies:
    - init:dry
  script:
    - cd opsiweb
    - *define_globals
    - npm-uib i -D @playwright/test
    - npx playwright install
    - PORT=3003 nohup dry --dry-save-package-json-to package-merged.json --dry-keep-package-json run dev > .dev.log &
    - PORT=3003 nohup dry --dry-save-package-json-to package-merged.json --dry-keep-package-json run story > .storybook.log &
    - sleep 60
    - npm-uib run test:all:components || exit_code=$?
    - npm-uib run test:all:delete-empty-results
    - exit $exit_code
  allow_failure: true
  artifacts:
    name: 'opsi-webgui-test-result-components'
    when: on_failure
    paths:
      - ./**/*/test-results/
      - ./opsiweb/.storybook.log
      - ./opsiweb/.dev.log
    reports:
      junit: ./opsiweb/test-result-pw-reporter-components.xml
    expire_in: 2 day



# .pylint: &pylint |
#   echo "---------------------------------------"
#   echo "Run pylint"
#   echo "---------------------------------------"
#   poetry run pylint --disable=R,C,fixme

test:backend-pytest:
  image: docker.uib.gmbh/opsi/dev/pybuilder:uib-python-3.10
  services:
    - name: mysql:latest
      command:
        - --max_connections=1000
        - --default-authentication-plugin=mysql_native_password
    - name: redislabs/redistimeseries:latest
      alias: redis
  variables:
    MYSQL_ROOT_PASSWORD: "opsi"
    MYSQL_DATABASE: "opsitest"
    MYSQL_USER: "opsi"
    MYSQL_PASSWORD: "opsi"
  script:
    - *prepare_backend_tests
    - echo "##########################################"
    - echo "##################pytest##################"
    - echo "##########################################"
    - *pytest


#########################################################################
######################################################################### build
#########################################################################
build:static-app:
  stage: build
  dependencies:
    - init:dry:production
    - test:lint
    #- test:jtest
  script:
    - cd opsiweb
    - *define_globals
    - npm-uib run generate
  artifacts:
    name: 'opsi-webgui'
    paths:
      - ./opsiweb/ui/dist
    expire_in: 1 day
  only:
    - develop
    - tags


build:addon:
  stage: build
  dependencies:
    - init:dry:production
    - build:static-app
  script:
    - *install_tools
    - ls -la
    - ls -la opsiweb
    - pwd
    - cd opsiweb
    - *define_globals
    #- npm install
    - npm-uib run generate
    #- npm run generate
    - cd ..
    - mkdir -p backend/webgui/data
    - mv opsiweb/ui/dist backend/webgui/data/app
    - mkdir webgui
    - cp -r backend/webgui/* webgui/
  only:
    - tags
  artifacts:
    name: 'webgui'
    paths:
      - webgui
    expire_in: 2 day

publish:obs_int:
  stage: publish
  dependencies:
    - build:static-app
  script:
    - *install_tools
    - ./opsi-dev-tool -l debug --obs-update-package https://obs.uib.gmbh home:uibmz:opsi:4.2:development
  only:
    - tags
  # Copy to experimental
  # Local: osc -A https://api.opensuse.org copypac home:uibmz:opsi:4.2:development opsi-webgui home:uibmz:opsi:4.2:experimental
  # alternative install: http://obs.uib.local:82/home:/uibmz:/opsi:/4.2:/development/Debian_10/



#########################################################################
######################################################################### publish
#########################################################################
publish:binary-index:
  stage: publish
  dependencies:
    - build:static-app
  script:
    - *install_tools
    - '[ "$CI_COMMIT_TAG" = "" ] && ./opsi-dev-tool -l debug --binary-push opsiweb/ui/dist opsi-webgui linux x64 $CI_JOB_ID'
    - '[ "$CI_COMMIT_TAG" = "" ] || ./opsi-dev-tool -l debug --binary-push opsiweb/ui/dist opsi-webgui linux x64'
  only:
    - develop

# publish:obs_ext:
#   stage: publish
#   dependencies:
#     - build:static-app
#   script:
#     - *install_tools
#     - ./opsi-dev-tool -l info --obs-update-package https://build.opensuse.org home:uibmz:opsi:4.2:development
#   when: manual
#   only:
#    - tags
