image: node:current-slim

stages:
  - check
  - init
  - test
  - build
  - upload
  - publish
  - release


.define_globals: &define_globals |
  shopt -s expand_aliases

.install_playwright: &install_playwright |
  npm i -D @playwright/test
  npx playwright install --with-deps chromium

.start_storybook: &start_storybook |
  PORT=3003 nohup npm run story > .storybook.log &

.start_webgui: &start_webgui |
  PORT=8888 nohup npm run dev > .dev.log &

.install_tools: &install_tools |
  export DEBIAN_FRONTEND=noninteractive
  apt update
  apt -y install debhelper osc zip
  # wget http://binaryindex.uib.gmbh/development/opsi-dev-tools/linux/x64/opsi-dev-tools_linux_x64_1.0.79.tar.gz
  # tar -xf opsi-dev-tools_linux_x64_1.0.79.tar.gz
  curl -o opsi-dev-tools.tar.gz "$OPSIDEVTOOLS_URL_LINUX_X64"
  tar -xvf opsi-dev-tools.tar.gz
  cp opsi-dev-tool opsi-dev-cli



.prepare_backend_tests: &prepare_backend_tests |
  apt update
  echo "install stuff"
  apt -y install git
  apt -y install bc wget python3-pip python3-dev python3-venv iproute2 net-tools iputils-ping
  git clone -b devel https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.uib.gmbh/uib/opsiconfd.git

  cd opsiconfd

   # Install debian packages
  export DEBIAN_FRONTEND=noninteractive
  apt update
  apt -y install debhelper osc
  apt -y install python3-dev
  apt -y install mariadb-client bc
  pip3 install --trusted-host pypi.uib.gmbh --index-url http://pypi.uib.gmbh:8080/simple opsi-dev-tools
  pip3 install poetry


  # Grant full database access to opsi user
  mysql --host=mysql --user=root --password=${MYSQL_ROOT_PASSWORD} -e "GRANT ALL ON opsitest.* TO 'opsi'@'%';"

  # Get config files from opsi-server package
  [ -e /etc/opsi ] && rm -r /etc/opsi
  [ -e ../opsi-server ] && rm -r ../opsi-server
  url=$(git remote -v | grep fetch | cut -f2 | sed s'#/opsiconfd.git.*#/opsi-server.git#')
  #branch=$(git rev-parse --abbrev-ref HEAD)
  branch=master
  GIT_TERMINAL_PROMPT=0 git clone --branch $branch $url ../opsi-server
  cp -a ../opsi-server/opsi-server_data/etc /etc/opsi

  # Configure opsiconfd
  mkdir -p /var/lib/opsi/repository /var/lib/opsi/depot

  echo "redis-internal-url = redis://redis" >> tests/data/default-opsiconfd.conf
  echo "log-level-stderr = 0" >> tests/data/default-opsiconfd.conf
  echo "log-level-file = 6" >> tests/data/default-opsiconfd.conf
  echo "log-file = /tmp/opsiconfd.log" >> tests/data/default-opsiconfd.conf
  echo "addon-dirs = [../backend/addon]" >> tests/data/default-opsiconfd.conf

  # Installing opsi test modules file
  mkdir -p /etc/opsi/licenses
  wget --header="Authorization: Bearer ${OPSILICSRV_TOKEN}" "https://opsi-license-server.uib.gmbh/api/v1/licenses/test?usage=opsiconfd-gitlab-ci" -O /etc/opsi/licenses/test.opsilic


  # linking python3 as python for compatibility
  # ln -s /usr/bin/python3 /usr/bin/python

  # Create dirs
  mkdir -p /var/log/opsi/clientconnect
  mkdir -p /var/lib/opsi/public
  mkdir -p /tftpboot

  # Install poetry
  pip3 install poetry
  poetry config experimental.new-installer false
  poetry lock --no-update
  poetry install
  poetry run opsiconfd -c tests/data/default-opsiconfd.conf -l5 setup

  # Create adminuser used in tests
  useradd adminuser
  echo "adminuser:adminuser" | chpasswd
  adduser adminuser opsiadmin

  # Start and wait for redis server
  # redis-server /etc/redis/redis.conf &
  sleep 20

.pytest: &pytest |

  [ -e /tmp/opsiconfd.log ] && rm /tmp/opsiconfd.log
  export OPSICONFD_MAX_SESSIONS_PER_IP=20000
  poetry run opsiconfd -c tests/data/default-opsiconfd.conf &
  sleep 60
  curl -I https://adminuser:adminuser@localhost:4447/admin
  echo "---------------------------------------"
  echo "Run tests"
  echo "---------------------------------------"
  exit_code=0
  pwd
  ls -la
  ls -la ../backend
  ls -la ../backend/addon
  # cp -R ../backend/tests
  poetry run pytest  --tb=short -v ../backend/tests || exit_code=$?
  if [ $exit_code -ne 0 ]; then
    echo "---------------------------------------"
    echo "opsiconfd log"
    echo "---------------------------------------"
    cat /tmp/opsiconfd.log
    exit $exit_code
  fi

.get_changed_files: &get_changed_files |
  cd uib-components
  changedFiles=$(git diff origin/main -r --no-commit-id --name-only | grep -i -P 'stories.js|test.component.js|test.unit.js|.vue' | grep -v 'test.component.js-snapshot')
  echo "$changedFiles"
  basenames=$(basename -s .stories.js $(basename -s .test.component.js $(basename -s .vue -a $changedFiles)))
  echo "$basenames"
  testfilesUnique=$(echo $basenames | tr ' ' '\n' | awk '!a[$0]++')
  # todo checking if each file in testfilesUnique exists
  echo "$testfilesUnique"
  cd ..


.compare_versions: &compare_versions |
  VERSION_YML=$(grep opsi-dev-tool.yml -A 20 -e project | grep -m 1 "version:" | awk '{print $2}' | sed -e "s/,//g")
  VERSION_YML2=$(grep opsi-dev-tool.yml -A 30 -e pull-binaries | grep -m 1 "version:" | awk '{print $2}' | sed -e "s/,//g")
  VERSION_JSN=$(cat opsiweb/package.json | grep "\"version\"" | awk '{print $2}' | sed -e "s/,//g")
  TAG=$$VERSION_YML
  echo $VERSION_YML2
  echo $VERSION_JSN
  echo TAG


# .prepare_tag: &prepare_tag |
#   # "prepare tag"
#   if git show-ref --tags $TAG --quiet; then echo "Tag '$TAG' already exists."; else echo "Tag not yet exists '$TAG'"; fi
#   # if git show-ref --tags $TAG --quiet; then echo "Tag '$TAG' already exists."; exit 2; else echo "Tag not yet exists '$TAG'"; fi
#   # LTAG=$(git describe --tags --abbrev=0 || git tag) # latest tag
#   LTAG=$(git tag --sort=taggerdate | tail -1)
#   echo "Latest tag... '$LTAG'"

# .push_tag: &push_tag |
#   # post tag
#   echo "ProjectURL: $CI_API_V4_URL"
#   echo "ProjectID: $CI_PROJECT_ID"
#   echo "ProjectTAG: $TAG"
#   printf "ProjectMSG: \n$(cat $FILE)\n"
#   printf "ProjectURL: $CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/tags?tag_name=$TAG&ref=main\n"
#   # if [ "$http_response" != "200" ]; then echo "$http_response: $(cat response.txt)"; exit $http_response; fi
#   # echo ""

# .delete_tag: &delete_tag |
#   # delete tag
#   curl --request DELETE \
#     --header "PRIVATE-TOKEN: $TOKEN_SUCHER" \
#     --url "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/tags?tag_name=$TAG" || exit_code_del2=$?
#   echo ""
#   git tag -d $TAG || exit_code_del=$?
#   echo ""

# .prepare_git: &prepare_git |
#   # "prepare git"
#   git config --global user.name "${GITLAB_USER_NAME}"
#   git config --global user.email "${GITLAB_USER_EMAIL}"
#   git config --global http.postBuffer 52428800
#   git fetch

#########################################################################
######################################################################### init
#########################################################################
check:versions:
  stage: check
  image: docker.uib.gmbh/opsi/dev/pybuilder:uib-python-3.11 # cause smaller then node...
  script:
    - VERSION_YML=$(grep opsi-dev-tool.yml -A 20 -e project | grep -m 1 "version:" | awk '{print $2}' | sed -e "s/,//g")
    - VERSION_YML2=$(grep opsi-dev-tool.yml -A 30 -e pull-binaries | grep -m 1 "version:" | awk '{print $2}' | sed -e "s/,//g")
    - VERSION_JSN=$(cat opsiweb/package.json | grep "\"version\"" | awk '{print $2}' | sed -e "s/,//g")
    - TAG=$VERSION_YML
    - echo $VERSION_YML
    - echo $VERSION_YML2
    - echo $VERSION_JSN
    - echo $TAG
    - if [ "$VERSION_YML" != "$VERSION_YML2" ]; then echo "Versions in opsi-dev-tool-yml doesnt match (project and pull-binaries section)"; exit 1; fi
    - if [ "$VERSION_YML" != "$VERSION_JSN" ]; then echo "Versions do not match for opsi-dev-tool-yml and opsiweb/package.json"; exit 1; else echo "Versions are equal $VERSION_YML"; fi

init:npm:production:
  stage: init
  only:
    - main
    - tags
  script:
    - cd opsiweb
    - *define_globals
    - npm --production --only=prod i # Todo: whats the difference between --production and --only=prod
    - du -h --max-depth=0 node_modules # just for checking node_modules size (locally computed 251M; CICD: 360M)
  artifacts:
    paths:
      - opsiweb/package.json
      - opsiweb/node_modules/
    expire_in: 1 day
init:npm:
  stage: init
  script:
    - cd opsiweb
    - *define_globals
    - npm i
    - du -h --max-depth=0 node_modules # just for checking node_modules size (locally computed: 674M; CICD: 801M)
  artifacts:
    paths:
      - opsiweb/package.json
      - opsiweb/node_modules/
    expire_in: 1 day
init:transifex:
  # this step have to be done before building webgui
  stage: init
  image: docker.uib.gmbh/opsi/dev/pybuilder:uib-python-3.11
  script:
    - TRANSIFEX_MIN_TRANSLATION_RATE=0.0
    - '[ "$CI_COMMIT_TAG" = "" ] || TRANSIFEX_MIN_TRANSLATION_RATE=1.0'
    - opsi-dev-cli -l debug transifex upload-resource opsiweb/uib-components/locale/opsi-webgui_en.json
    - opsi-dev-cli -l debug transifex download-translations opsi-webgui.json opsiweb/uib-components/locale/ --min-review-rate $TRANSIFEX_MIN_TRANSLATION_RATE -l de -l fr
    - chmod 666 opsiweb/uib-components/locale/*
  only:
    - tags
    - main
  artifacts:
    name: "opsi-webgui-locale"
    paths:
      - opsiweb/uib-components/locale
    expire_in: 3 day
init:changelogs:
  # this step have to be done before building webgui
  stage: init
  image: docker.uib.gmbh/opsi/dev/pybuilder:uib-python-3.11
  script:
    - opsi-dev-cli -l 5 changelog from-git output
    # - cp -f output/changelog.md webgui/data/.
    - chmod 666 output/*
  only:
    - tags
    - main
  artifacts:
    name: "opsi-webgui-changelogs"
    paths:
      - output
    expire_in: 1 day

#########################################################################
######################################################################### test
#########################################################################
test:lint:
  stage: test
  dependencies:
    - init:npm
    - init:transifex
  before_script:
    - cd opsiweb
    - *define_globals
  script:
    - npm run lint
# test:unit:
  #   stage: test
  #   dependencies:
  #     - init:npm
  #   script:
  #     - cd opsiweb
  #     - *define_globals
  #     - npm run test:unit
  #   allow_failure: true
  #   coverage: /All files\s*\|\s*([\d\.]+)/
  #   artifacts:
  #     expire_in: 1 day
  #     reports:
  #       coverage_report:
  #         coverage_format: cobertura
  #         path: opsiweb/coverage/clover.xmlci

test:accessibility:
  image: mcr.microsoft.com/playwright:v1.38.0-jammy
  stage: test
  dependencies:
    - init:npm
  before_script:
    - cd opsiweb
    - *start_webgui
  script:
    - npm run test:all:accessibility || exit_code=$?
    - exit $exit_code
  after_script:
    - npm run test:all:delete-empty-results
  allow_failure: true
  only:
    - main
    - tags
  artifacts:
    name: "opsi-webgui-test-result-accessibility"
    when: on_failure
    paths:
      - ./**/*/test-results/
      - opsiweb/.dev.log
    reports:
      junit: opsiweb/.config/test-result-pw-reporter-accessibility.xml
    expire_in: 1 day
test:usecase:
  image: mcr.microsoft.com/playwright:v1.38.0-jammy
  stage: test
  dependencies:
    - init:npm
  before_script:
    - cd opsiweb
    - *define_globals
    - *install_playwright
    - *start_webgui
  script:
    - npm run test:all:usecase || exit_code=$?
    - exit $exit_code
  after_script:
    - npm run test:all:delete-empty-results
  allow_failure: true
  only:
    - main
    - tags
  artifacts:
    name: "opsi-webgui-test-result-usecase"
    when: on_failure
    paths:
      - ./**/*/test-results/
      - opsiweb/.dev.log
    reports:
      junit: opsiweb/.config/test-result-pw-reporter-usecase.xml
    expire_in: 1 day

test:components:changes:
  image: mcr.microsoft.com/playwright:v1.15.2-focal
  stage: test
  dependencies:
    - init:npm
  except:
    - cicd
    - tags # cause in tags we test all browsers (and all files)
    - main # cause in main we test all files
  only:
    changes:
      - opsiweb/pages/*
      - opsiweb/components/*
      - opsiweb/uib-components/*
  before_script:
    - cd opsiweb
    - *define_globals
    - *install_playwright
    - *get_changed_files
    - echo "$testfilesUnique"
    - *start_storybook
    - *start_webgui
    - sleep 120
  script:
    - npm run test:all:components $testfilesUnique || exit_code=$?
    - exit $exit_code
  after_script:
    - npm run test:all:delete-empty-results
  allow_failure: true
  artifacts:
    name: "opsi-webgui-test-result-components"
    when: on_failure
    paths:
      - ./**/*/test-results/
      - opsiweb/.storybook.log
      - opsiweb/.dev.log
    reports:
      junit: ./opsiweb/.config/test-result-pw-reporter-components.xml
    expire_in: 1 day
test:components:
  image: mcr.microsoft.com/playwright:v1.15.2-focal
  stage: test
  dependencies:
    - init:npm
  only:
    - main # cause in main we test all files, but only chromium browser
    - tags
  before_script:
    - cd opsiweb
    - *define_globals
    - *install_playwright
    - *start_storybook
    - *start_webgui
    - sleep 60
  script:
    - npm run test:all:components | tee .tmpRESULT
    - exit_code=${PIPESTATUS[0]}
    - exit $exit_code
  after_script:
    - cd opsiweb
    - scripts/playwright_coverage.sh .tmpRESULT
    - npm run test:all:delete-empty-results
  allow_failure: true
  coverage: /TESTED FILES\s*:\s*([^%]+)/
  artifacts:
    name: "opsi-webgui-test-result-components"
    when: on_failure
    paths:
      - ./**/*/test-results/
      - opsiweb/.storybook.log
      - opsiweb/.dev.log
      - opsiweb/.tmpRESULT
    reports:
      junit: ./opsiweb/test-result-pw-reporter-components.xml
    expire_in: 3 day
# test:test-components:all-variants:
  #   image: mcr.microsoft.com/playwright:v1.15.2-focal
  #   stage: test
  #   dependencies:
  #     - init:npm
  #   except:
  #     - cicd
  #   only:
  #     - tags # cause in tags we test each file and browser
  #   script:
  #     - cd opsiweb
  #     #- *define_globals
  #     - npm i -D @playwright/test
  #     - npx playwright install
  #     - npx playwright install-deps
  #     - PORT=3003 nohup npm run dev > .dev.log &
  #     - PORT=3003 nohup npm run story > .storybook.log &
  #     - sleep 60
  #     - npm run test:all:components-devices || exit_code=$?
  #     - npm run test:all:delete-empty-results
  #     - exit $exit_code
  #   # allow_failure: true
  #   artifacts:
  #     name: "opsi-webgui-test-result-components"
  #     when: on_failure
  #     paths:
  #       - ./**/*/test-results/
  #       - opsiweb/.storybook.log
  #       - opsiweb/.dev.log
  #     reports:
  #       junit: ./opsiweb/test-result-pw-reporter-components.xml
  #     expire_in: 2 day

test:backend-pytest:
  image: docker.uib.gmbh/opsi/dev/pybuilder:uib-python-3.11
  services:
    - name: mysql:latest
      command:
        - --max_connections=1000
        - --default-authentication-plugin=mysql_native_password
    - name: redislabs/redistimeseries:latest
      alias: redis
  variables:
    MYSQL_ROOT_PASSWORD: "opsi"
    MYSQL_DATABASE: "opsitest"
    MYSQL_USER: "opsi"
    MYSQL_PASSWORD: "opsi"
  script:
    - *prepare_backend_tests
    - echo "##########################################"
    - echo "##################pytest##################"
    - echo "##########################################"
    - *pytest
  allow_failure: true ##### TODO remove again

#########################################################################
######################################################################### build
#########################################################################
build:screenshots:docs: # with transifex
  image: mcr.microsoft.com/playwright:v1.15.2-focal
  stage: build
  dependencies:
    - init:npm
    - init:transifex
  only:
    - main # cause in main we test all files, but only chromium browser
    - tags
  before_script:
    - cd opsiweb
    - *define_globals
    - *install_playwright
    - *start_storybook
    - *start_webgui
  script:
    - cd screenshots4Docs
    - npx playwright test -c playwright-screenshots.config.js take_screenshots/  || exit_code=$?
  after_script:
    - exit $exit_code
  allow_failure: true
  artifacts:
    name: "opsi-webgui-screenshots-docs-result"
    when: always
    paths:
      - opsiweb/screenshots4Docs/screenshots
      - ./**/*/test-results/
      - opsiweb/.storybook.log
      - opsiweb/.dev.log
    expire_in: 7 day

build:static:app: # with transifex
  stage: build
  dependencies:
    - init:npm:production
    - init:transifex
    # - test:lint # todo activate again for main
  script:
    - cd opsiweb
    - npm i @nuxt/typescript-build
    - *define_globals
    - npm run generate-nossl
  artifacts:
    paths:
      - opsiweb/dist # not used...?
    expire_in: 3 day
  only:
    - main
    - tags

build:addon: # with transifex
  stage: build
  dependencies:
    - init:npm:production # doesnt download artifacts from static-app
    - init:transifex
    - init:changelogs
    # - build:static:app # already done in this job
  script:
    - *install_tools
    - pwd && ls -la opsiweb
    - cd opsiweb # generate dist
    - npm i @nuxt/typescript-build  # quick fix, cause this lib cant be found in
    - cd ..
    - *define_globals
    # - npm run generate-nossl
    - bash opsiweb/scripts/build_production_local.sh $(pwd)
    # - cd .. # copy to addon
    # - mkdir -p backend/addon/webgui/data
    # - mkdir -p backend/addon/webgui/data/app
    # - cp -r opsiweb/dist/* backend/addon/webgui/data/app/
    # - mkdir webgui
    # - cp -r backend/addon/webgui/* webgui/
    # path should be opsiweb/.. again
    - mv opsiweb/webgui webgui
    - cp -f output/changelog.md webgui/data/.
    - ls -lah webgui # debug
    - zip -r -q opsi-webgui.zip webgui
  only:
    - tags
    - main
  artifacts:
    name: "opsi-webgui-with-zip"
    paths:
      - webgui
      - opsi-webgui.zip
    expire_in: 3 day

build:zip: # with transifex
  image: node:current-slim
  stage: build
  dependencies:
    - init:npm:production # doesnt download artifacts from static-app
    - build:static:app
    - init:transifex
    - init:changelogs
  script:
    - *install_tools
    - pwd && ls -la opsiweb
    - cd opsiweb # generate dist
    - ls -lah uib-components/locale
    - npm i @nuxt/typescript-build  # quick fix, cause this lib cant be found in
    - *define_globals
    - npm run generate-nossl
    - cd .. # copy to addon
    - mkdir -p backend/addon/webgui/data
    - mkdir -p backend/addon/webgui/data/app
    - cp -r opsiweb/dist/* backend/addon/webgui/data/app/
    - mkdir webgui
    - cp -r backend/addon/webgui/* webgui/
    - cp -f output/changelog.md webgui/data/.
    - ls -lah webgui # debug
    - ls -lah webgui/data # debug
    - ls -lah opsiweb/uib-components/locale
  only:
    - tags
    - main
  artifacts:
    name: "opsi-webgui"
    paths:
      - webgui
    expire_in: 7 day



#########################################################################
######################################################################### create tag
#########################################################################

# upload:gittag:
#   image: docker.uib.gmbh/opsi/dev/pybuilder:uib-python-3.11
#   stage: upload
#   script:
#     - FILE=".tmp_changelog"
#     - *prepare_git
#     - *install_tools
#     - echo "all tags... $(git tag)"
#     # - echo "delete Tag..."
#     # - TAG=4.3.1.1
#     # - *delete_tag
#     # - TAG=4.3.14-test # on docker 4
#     # - *delete_tag
#     # - TAG=4.3.15 # on docker 4
#     # - *delete_tag
#     # - echo ""
#     - *compare_versions
#     - *prepare_tag
#     - git log --oneline --pretty=format:"%s" ...$LTAG | grep -e "\[*pub*\]" | sort | tee $FILE || (echo "no changelog entries since $LTAG... Add at least one pub message"; exit 3)
#     - CHANGELOG_MSG=$(cat $FILE)
#     - *push_tag
#     # - |
#     #   curl --request POST \
#     #     --header "PRIVATE-TOKEN: $TOKEN_SUCHER" \
#     #     --data-urlencode "message=$CHANGELOG_MSG" \
#     #     --url "https://gitlab.uib.gmbh/api/v4/projects/335/repository/tags?tag_name=$TAG&ref=main"
#     # - echo "Git Tag created successfully"
#     - echo "changelog since last tag collected:"
#     - echo "$CHANGELOG_MSG"
#         # --url "$CI_API_V4_URL/projects/335/repository/tags?tag_name=$TAG&ref=main"
#     # -o response.txt \
#     # - URL="$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/tags?tag_name=$TAG&ref=main"
#     # - echo "$URL"
#     # - |
#     #   curl --request POST --header "PRIVATE-TOKEN: $TOKEN_SUCHER"  --data-urlencode "message=$(cat $FILE)"  "$URL"

#     # - printf "\nRESPONSE:\n $(cat response.txt)"
#     - rm $FILE
#   # when: manual
#   allow_failure: false
#   when: always
#   only: # visible in this branches: (main!)
#     - main
#     - tag

#########################################################################
######################################################################### publish
#########################################################################

# .push_release: &push_release |
  #   # post release
  #   echo "ProjectURL: $CI_API_V4_URL"
  #   echo "ProjectID: $CI_PROJECT_ID"
  #   LTAG=$(git describe --tags --abbrev=0 || git tag) # latest tag
  #   echo "ProjectTAG: $TAG"
  #   printf "ProjectMSG: \n$(cat $FILE)\n"
  #   http_response=$(curl --request POST \
  #     -o response.txt \
  #     --fail-with-body \
  #     --header "PRIVATE-TOKEN: $TOKEN_SUCHER" \
  #     --url "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases?tag_name=$TAG&ref=main" \
  #     --data-urlencode "message=$(cat $FILE)" )

  #   echo "$http_response: $(cat response.txt)"
  #   if [ "$http_response" != "200" ]; then echo "$http_response: $(cat response.txt)"; exit $http_response; fi
  #   echo ""

# upload:git:
  #   stage: upload
  #   image: registry.gitlab.com/gitlab-org/release-cli:latest
  #   needs:
  #     - job: build:zip
  #       artifacts: true
  #   rules:
  #     - if: $CI_COMMIT_TAG                 # Run this job when a tag is created
  #   script:
  #     - echo "Create Release $TAG, $CI_COMMIT_TAG, $JOB_ID"
  #   release:                               # See https://docs.gitlab.com/ee/ci/yaml/#release for available properties
  #     tag_name: '$CI_COMMIT_TAG'
  #     description: '$CI_COMMIT_TAG'
  #   release:
  #     name: 'Release $CI_COMMIT_TAG'
  #     tag_name: '$CI_COMMIT_TAG'
  #     ref: '$CI_COMMIT_TAG'
  #     description: 'Release $CI_COMMIT_TAG'
  #     assets:
  #       links:
  #         - name: "opsi-webgui"
  #           url: "https://gitlab.com/uib/opsiweb-ui/-/jobs/$JOB_ID/artifacts/download"

publish:obs_int:
  stage: publish
  dependencies:
    - build:static:app
  image: docker.uib.gmbh/opsi/dev/pybuilder:uib-python-3.11
  script:
    - opsi-dev-tool -l debug --obs-update-package https://obs.uib.gmbh home:uibmz:opsi:4.3:development
  only:
    - tags

publish:obs_ext:
  stage: publish
  image: docker.uib.gmbh/opsi/dev/pybuilder:uib-python-3.11
  dependencies:
    - init:changelogs
    - build:addon # todo which is really needed?
    - build:static:app # todo which is really needed?
  script:
    - ls -la
    - ls -la opsiweb
    - ls -la webgui
    - ls -la output
    # - opsi-dev-cli -l 5 changelog from-git output
    - opsi-dev-tool -l debug --obs-update-package https://build.opensuse.org home:uibmz:opsi:4.3:development
    - opsi-dev-cli -l 6 release-service register-package-version opsi-webgui SERVER_PACKAGE --changelog-file output/changelog.md
    - opsi-dev-cli -l 6 release-service push-repository-state opsi-webgui SERVER_PACKAGE SERVER_PACKAGE-4.3-development
  only:
    - tags
  artifacts:
    name: "opsi-webgui-changelogs"
    paths:
      - output
    expire_in: 1 day
  # Copy to experimental via release-tui

publish:binary-index:
  stage: publish
  dependencies:
    - build:addon
    - init:changelogs
  image: docker.uib.gmbh/opsi/dev/pybuilder:uib-python-3.11
  script:
    - ls -la
    - ls -la opsiweb
    - ls -la webgui
    - ls -la output
    # - opsi-dev-cli -l 5 changelog from-git output # done during init
    - cat output/changelog.md
    - opsi-dev-cli -l 6 binary push opsi-webgui.zip --product=opsi-webgui.zip  # pushing as opsi-webgui.zip now
    - opsi-dev-cli -l 6 release-service register-package-version opsi-webgui.zip TOOL --changelog-file output/changelog.md --files=opsi-webgui.zip
  only:
    - tags

# release:experimental:
  #   stage: release
  #   when: manual
  #   before_script:
  #     - "which ssh-agent || (apt update && apt -y install openssh-client)"
  #     - mkdir -p ~/.ssh
  #     - eval $(ssh-agent -s)
  #     - ssh-add <(echo "$DOWNLOAD_UIB_PRIVATE_KEY")
  #   dependencies:
  #     - publish:obs_ext
  #     - publish:binary-index
  #   script:
  #     - *install_tools
  #     - ./opsi-dev-tool -l debug --binary-pull
  #     - scp -o StrictHostKeyChecking=no -r opsi-webgui_${CI_COMMIT_TAG}.zip "$DOWNLOAD_UIB_USER@download.uib.de:/var/www/opsi/htdocs/opsi4.2/experimental/opsiconfd-addons/"
  #     - ./opsi-dev-tool -l debug --obs-api-conf $OBS_EXT_URL $OBS_EXT_USERNAME $OBS_EXT_PASSWORD
  #     - osc -A https://api.opensuse.org copypac home:uibmz:opsi:4.2:development opsi-webgui home:uibmz:opsi:4.3:experimental
  #   only:
  #     - tags
