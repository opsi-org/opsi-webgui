image: mcr.microsoft.com/playwright:v1.15.2-focal

stages:
  - init
  - test
  - build
  - publish

variables:
  GIT_SUBMODULE_STRATEGY: recursive
# run with specific submodule-branch defined in .gitmodules
# # provides a variable "GIT_SUBMODULE_STRATEGY" that sets up submodules automatically
# # But then branch tracking doesn't work (doesn't seem to allow for specifying the --remote) flag
before_script:
  - git submodule sync --recursive
  - git submodule update --init --recursive # --remote

# variables:
  # PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: "1"
  # PLAYWRIGHT_BROWSERS_PATH: ".playwright/browsers/"
.install_tools: &install_tools |
  export DEBIAN_FRONTEND=noninteractive
  apt update
  apt -y install debhelper osc
  wget http://binaryindex.uib.gmbh/development/opsi-dev-tools/linux/x64/opsi-dev-tools_linux_x64_1.0.79.tar.gz
  tar -xf opsi-dev-tools_linux_x64_1.0.79.tar.gz


.prepare_backend_tests: &prepare_backend_tests |
  git clone -b devel https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.uib.gmbh/uib/opsiconfd.git

  cd opsiconfd

  export DEBIAN_FRONTEND=noninteractive
  apt update
  apt -y install debhelper osc
  apt -y install python3-dev
  pip3 install --trusted-host pypi.uib.gmbh --index-url http://pypi.uib.gmbh:8080/simple opsi-dev-tools
  pip3 install poetry

  # Install debian packages
  export DEBIAN_FRONTEND=noninteractive
  apt update
  apt -y install bc wget git python3-pip python3-dev python3-venv libmysqlclient-dev mysql-client iproute2 net-tools iputils-ping librsync2
  # linking python3 as python for compatibility
  ln -s /usr/bin/python3 /usr/bin/python
  # Need redis-timeseries 1.2.8 which is not yet available, installing patched version from obs
  wget http://obs.uib.gmbh:82/home:/uibmz:/opsi:/4.2:/development/xUbuntu_20.04/amd64/redis-server_6.0.4-1_amd64.deb
  wget http://obs.uib.gmbh:82/home:/uibmz:/opsi:/4.2:/development/xUbuntu_20.04/amd64/redis-tools_6.0.4-1_amd64.deb
  wget http://obs.uib.gmbh:82/home:/uibmz:/opsi:/4.2:/development/xUbuntu_20.04/amd64/redis-timeseries_1.4.13.0-1_amd64.deb
  wget http://obs.uib.gmbh:82/home:/uibmz:/opsi:/4.2:/development/xUbuntu_20.04/amd64/liblzf1_3.6-2_amd64.deb
  dpkg -i *.deb || apt -y -f install

  # Grant full database access to opsi user
  mysql --host=mysql --user=root --password=${MYSQL_ROOT_PASSWORD} -e "GRANT ALL ON opsitest.* TO 'opsi'@'%';"

  # Get config files from opsi-server package
  [ -e /etc/opsi ] && rm -r /etc/opsi
  [ -e ../opsi-server ] && rm -r ../opsi-server
  url=$(git remote -v | grep fetch | cut -f2 | sed s'#/opsiconfd.git.*#/opsi-server.git#')
  #branch=$(git rev-parse --abbrev-ref HEAD)
  branch=master
  GIT_TERMINAL_PROMPT=0 git clone --branch $branch $url ../opsi-server
  cp -a ../opsi-server/opsi-server_data/etc /etc/opsi

  # Configure opsiconfd
  mkdir -p /var/lib/opsi/repository /var/lib/opsi/depot
  echo "redis-internal-url = redis://redis" > /etc/opsi/opsiconfd.conf
  echo "log-level-stderr = 0" >> /etc/opsi/opsiconfd.conf
  echo "log-level-file = 6" >> /etc/opsi/opsiconfd.conf
  echo "log-file = /tmp/opsiconfd.log" >> /etc/opsi/opsiconfd.conf
  echo "max-session-per-ip = 30" >> /etc/opsi/opsiconfd.conf
  echo "max-auth-failures = 3" >> /etc/opsi/opsiconfd.conf
  echo "backend-config-dir = tests/opsi-config/backends" >> /etc/opsi/opsiconfd.conf
  echo "dispatch-config-file = tests/opsi-config/backendManager/dispatch.conf" >> /etc/opsi/opsiconfd.conf
  echo "static-dir = opsiconfd_data/static" >> /etc/opsi/opsiconfd.conf
  echo "addon-dirs = [tests/data/addons]" >> /etc/opsi/opsiconfd.conf

  # Installing opsi test modules file
  echo "${OPSI_TEST_MODULES}" > /etc/opsi/modules

  # Install poetry
  pip3 install poetry
  poetry config experimental.new-installer false
  poetry lock --no-update
  poetry install
  poetry run opsiconfd -l5 setup

  # Create adminuser used in tests
  useradd adminuser
  echo "adminuser:adminuser" | chpasswd
  adduser adminuser opsiadmin

  # Start and wait for redis server
  redis-server /etc/redis/redis.conf &
  sleep 10

.pytest: &pytest |
  [ -e /tmp/opsiconfd.log ] && rm /tmp/opsiconfd.log

  sleep 10
  echo "---------------------------------------"
  echo "Run tests"
  echo "---------------------------------------"
  exit_code=0
  poetry run pytest -o junit_family=xunit2 --junitxml=testreport.xml --cov-append --cov opsiconfd --cov-report term --cov-report xml -v ../backend/tests || exit_code=$?
  if [ $exit_code -ne 0 ]; then
    echo "---------------------------------------"
    echo "opsiconfd log"
    echo "---------------------------------------"
    cat /tmp/opsiconfd.log
    exit $exit_code
  fi


init:npm:
  stage: init
  script: |
    # git submodule update --init --recursiv
    cd opsiweb
    ls -lah components
    echo "[script.sh] install dependencies..."
    npm install
    npm i -D @playwright/test
    npx playwright install
  artifacts:
    paths:
      - opsiweb/node_modules/
    expire_in: 1 day

test:lint:
  stage: test
  script:
    - cd opsiweb
    - npm run lint

test:test-unit:
  stage: test
  dependencies:
    - init:npm
  script:
    - cd opsiweb
    - npm run test:unit
  coverage: /All files\s*\|\s*([\d\.]+)/
  artifacts:
    reports:
      cobertura: opsiweb/coverage/clover.xmlci

test:test-e2e:
  stage: test
  dependencies:
    - init:npm
  script:
    - cd opsiweb
    - npx playwright install
    - PORT=8888 nohup npm run dev &
    - sleep 20
    - echo $PLAYWRIGHT_BROWSERS_PATH
    - npm run test:e2e
  allow_failure: true
  artifacts:
    name: 'opsi-webgui-test-result-e2e'
    when: on_failure
    paths:
      - opsiweb/test-results/
    expire_in: 2 day

test:test-integration:
  stage: test
  dependencies:
    - init:npm
  script:
    - cd opsiweb
    - npx playwright install
    - PORT=8888 nohup npm run dev &
    - PORT=3003 nohup npm run story &
    - sleep 60
    - npm run test:integration
  allow_failure: true
  artifacts:
    name: 'opsi-webgui-test-result-integration'
    when: on_failure
    paths:
      - opsiweb/test-results/
    expire_in: 2 day



# .pylint: &pylint |
#   echo "---------------------------------------"
#   echo "Run pylint"
#   echo "---------------------------------------"
#   poetry run pylint --disable=R,C,fixme 

test:backend-pytest:
  image: ubuntu:focal
  services:
    - mysql:latest
    - name: redislabs/redistimeseries:latest
      alias: redis
  variables:
    MYSQL_ROOT_PASSWORD: "opsi"
    MYSQL_DATABASE: "opsitest"
    MYSQL_USER: "opsi"
    MYSQL_PASSWORD: "opsi"
  stage: test
  script:
    - *prepare_backend_tests
    - *pytest


build:static-app:
  stage: build
  dependencies:
    - init:npm
    - test:lint
    #- test:jtest
  script:
    - cd opsiweb
    - npm run generate
  artifacts:
    name: 'opsi-webgui'
    paths:
      - opsiweb/dist
    expire_in: 1 day
  only:
    - develop
    - tags

publish:binary-index:
  stage: publish
  dependencies:
    - build:static-app
  script:
    - *install_tools
    - '[ "$CI_COMMIT_TAG" = "" ] && ./opsi-dev-tool -l debug --binary-push opsiweb/dist opsi-webgui linux x64 $CI_JOB_ID'
    - '[ "$CI_COMMIT_TAG" = "" ] || ./opsi-dev-tool -l debug --binary-push opsiweb/dist opsi-webgui linux x64'
  only:
    - develop

build:addon:
  stage: build
  dependencies:
    - build:static-app
  script: |
    *install_tools
    openssl req -x509 -newkey rsa:4096 -keyout /var/tmp/key.pem -out /var/tmp/cert.pem -sha256 -days 365 --nodes -subj '/CN=localhost   
    mkdir -p backend/webgui/data
    mv opsiweb/dist backend/webgui/data/app
    version=$(grep ADDON_VERSION backend/python/const.py | cut -d'"' -f2)
  only:
    - tags
  artifacts:
    name: 'webgui'
    paths:
      - backend/webgui
    expire_in: 2 day

publish:obs_int:
  stage: publish
  dependencies:
    - build:static-app
  script:
    - *install_tools
    - ./opsi-dev-tool -l debug --obs-update-package https://obs.uib.gmbh home:uibmz:opsi:4.2:development
  only:
    - tags

# publish:obs_ext:
#   stage: publish
#   dependencies:
#     - build:static-app
#   script:
#     - *install_tools
#     - ./opsi-dev-tool -l info --obs-update-package https://build.opensuse.org home:uibmz:opsi:4.2:development
#   when: manual
#   only:
#    - tags
