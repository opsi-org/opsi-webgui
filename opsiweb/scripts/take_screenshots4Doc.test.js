const { test } = require('@playwright/test')
const { callStoryId } = require('../uib-components/.utils/playwright/pw-story-call')

test.describe('GUI', () => {
  // TODO: Default layout with client page
  test.describe('Main layout', () => {})
  // test.describe('Page content', () => {
  //   test('breadcrumb', async ({ page }) => {
  //     await callStoryId(page, 'bar-b-breadcrumb', 'b-breadcrumb')
  //     const component = await page.locator('[data-testid="BarBBreadcrumb"]')
  //     await component.evaluate(() => { document.querySelector('.breadcrumb').innerHTML = 'Server / Configuration' })
  //     await component.screenshot({ path: './screenshots/en/opsiweb_breadcrumb.png' })
  //     await component.evaluate(() => { document.querySelector('.breadcrumb').innerHTML = 'Server / Konfiguration' })
  //     await component.screenshot({ path: './screenshots/de/opsiweb_breadcrumb.png' })
  //   })
  //   test('header', async ({ page }) => {
  //     await callStoryId(page, 'bar-b-collapse-page-header', 'b-collapse-page-header')
  //     const component = await page.locator('[data-testid="BarBCollapsePageHeader"]')
  //     await component.evaluate(() => { document.querySelector('.nav-title').innerHTML = 'Clients' })
  //     await component.evaluate(() => { document.querySelector('.tableheader_depots').innerHTML = 'Server' })
  //     await component.evaluate(() => { document.querySelector('.tableheader_hostgroup').innerHTML = 'Hostgroups' })
  //     await component.evaluate(() => { document.querySelector('.tableheader_products').innerHTML = 'Products' })
  //     await component.screenshot({ path: './screenshots/en/opsiweb_header.png' })
  //     await component.evaluate(() => { document.querySelector('.tableheader_hostgroup').innerHTML = 'Hostgruppen' })
  //     await component.evaluate(() => { document.querySelector('.tableheader_products').innerHTML = 'Produkte' })
  //     await component.screenshot({ path: './screenshots/de/opsiweb_header.png' })
  //   })
  // })
  // test.describe('Table', () => {
  //   test('filter', async ({ page }) => {
  //     await callStoryId(page, 'input-i-filter', 'i-filter')
  //     const component = await page.locator('[data-testid="IFilter"]')
  //     await component.type('Filter ID')
  //     await component.screenshot({ path: './screenshots/en/opsiweb_table_filter.png' })
  //     await component.screenshot({ path: './screenshots/de/opsiweb_table_filter.png' })
  //   })
  //   test('sorting', async ({ page }) => {
  //     await callStoryId(page, 'dropdown-dd-table-sorting', 'dd-table-sorting')
  //     await page.click('[data-testid="DropdownDDTableSorting"] .btn')
  //     await page.setViewportSize({ width: 220, height: 310 })
  //     const component = await page.locator('[data-testid="DropdownDDTableSorting"]')
  //     await component.evaluate(() => { document.querySelector('.sortDirection').innerHTML = 'Sort descending' })
  //     await page.screenshot({ path: './screenshots/en/opsiweb_table_sorting.png' })
  //     await component.evaluate(() => { document.querySelector('.sortDirection').innerHTML = 'Absteigende Sortierung' })
  //     await page.screenshot({ path: './screenshots/de/opsiweb_table_sorting.png' })
  //   })
  //   test('column selection', async ({ page }) => {
  //     await callStoryId(page, 'dropdown-dd-table-column-visibility', 'dd-table-column-visibility')
  //     await page.click('[data-testid="DropdownDDTableColumnVisibility"] .btn')
  //     await page.setViewportSize({ width: 220, height: 210 })
  //     await page.screenshot({ path: './screenshots/en/opsiweb_table_columnselection.png' })
  //     await page.screenshot({ path: './screenshots/de/opsiweb_table_columnselection.png' })
  //   })
  //   test('pagination', async ({ page }) => {
  //     await callStoryId(page, 'bar-b-table-footer', 'b-table-footer')
  //     const component = await page.locator('[data-testid="BTableFooter"]')
  //     await component.screenshot({ path: './screenshots/en/opsiweb_table_pagination.png' })
  //     await component.screenshot({ path: './screenshots/de/opsiweb_table_pagination.png' })
  //   })
  // })
})
test.describe('Quick start', () => {
  test('Login', async ({ page }) => {
    await callStoryId(page, 'form-f-login', 'f-login')
    const component = await page.locator('[data-testid="FLogin"]')
    await component.evaluate(() => { document.querySelector('.projectTitle').innerHTML = 'OPSIWEB' })
    await component.evaluate(() => { document.querySelector('.username').placeholder = 'Username' })
    await component.evaluate(() => { document.querySelector('.password').placeholder = 'Password' })
    await component.evaluate(() => { document.querySelector('.login').innerHTML = 'Login' })
    await component.screenshot({ path: './screenshots/en/opsiweb_login.png' })
    await component.evaluate(() => { document.querySelector('.username').placeholder = 'Benutzername' })
    await component.evaluate(() => { document.querySelector('.password').placeholder = 'Passwort' })
    await component.evaluate(() => { document.querySelector('.login').innerHTML = 'Anmeldung' })
    await component.screenshot({ path: './screenshots/de/opsiweb_login.png' })
  })
  test('Client creation', async ({ page }) => {
    await callStoryId(page, 'view-v-clients-add-new', 'v-clients-add-new')
    const component = await page.locator('[data-testid="VClientsAddNew"]')
    // await component.evaluate(() => { document.querySelector('.projectTitle').innerHTML = 'OPSIWEB' })
    // await component.evaluate(() => { document.querySelector('.username').placeholder = 'Username' })
    // await component.evaluate(() => { document.querySelector('.password').placeholder = 'Password' })
    // await component.evaluate(() => { document.querySelector('.login').innerHTML = 'Login' })
    await component.screenshot({ path: './screenshots/en/opsiweb_clientcreation.png' })
    // await component.evaluate(() => { document.querySelector('.username').placeholder = 'Benutzername' })
    // await component.evaluate(() => { document.querySelector('.password').placeholder = 'Passwort' })
    // await component.evaluate(() => { document.querySelector('.login').innerHTML = 'Anmeldung' })
    await component.screenshot({ path: './screenshots/de/opsiweb_clientcreation.png' })
  })
})
test.describe('Manage', () => {
  test('Servers', async () => {})
  test('Clients', async () => {})
  test('Products', async () => {})
  test('HostGroups', async () => {})
  test('ProductGroups', async () => {})
  test('Host attributes', async () => {})
  test('Client deletion', async () => {})
  test('Client reboot', async () => {})
  test('Client logs', async () => {})
  test('Properties and Dependencies', async () => {})
  test('Quick save', async ({ page }) => {
    await callStoryId(page, 'view-v-settings-local-specific', 'v-settings-local-specific')
    const component = await page.locator('[data-testid="VSettingsLocalSpecific"]')
    await page.setViewportSize({ width: 420, height: 100 })
    await component.evaluate(() => { document.querySelector('.quicksave').innerHTML = 'Quick save' })
    await component.screenshot({ path: './screenshots/en/opsiweb_quicksave.png' })
    await component.evaluate(() => { document.querySelector('.quicksave').innerHTML = 'Sofort speichern' })
    await component.screenshot({ path: './screenshots/de/opsiweb_quicksave.png' })
  })
  test('Push installations', async () => {})
  test('Selections', async () => {})
})
test.describe('OPSI specific settings', () => {
  // TODO: Settings page with Modules content selected
  test('opsi modules', async ({ page }) => {
    await callStoryId(page, 'view-v-modules', 'v-modules')
    const component = await page.locator('[data-testid="VModules"]')
    await component.evaluate(() => { document.querySelector('.modules').innerHTML = 'Available modules' })
    await component.screenshot({ path: './screenshots/en/opsiweb_opsiModules.png' })
    await component.evaluate(() => { document.querySelector('.modules').innerHTML = 'VerfÃ¼gbare Module' })
    await component.screenshot({ path: './screenshots/de/opsiweb_opsiModules.png' })
  })
})
test.describe('GUI settings', () => {
  test('language', async ({ page }) => {
    await callStoryId(page, 'dropdown-dd-lang', 'dd-lang')
    const component = await page.locator('[data-testid="DropdownDDLang"]')
    await component.click()
    await page.setViewportSize({ width: 220, height: 150 })
    await page.screenshot({ path: './screenshots/en/opsiweb_language.png' })
    await page.screenshot({ path: './screenshots/de/opsiweb_language.png' })
  })
  test('theme', async ({ page }) => {
    await callStoryId(page, 'dropdown-dd-theme', 'dd-theme')
    await page.click('[data-testid="DropdownDDTheme"] .btn')
    await page.setViewportSize({ width: 220, height: 150 })
    await page.screenshot({ path: './screenshots/en/opsiweb_theme.png' })
    await page.screenshot({ path: './screenshots/de/opsiweb_theme.png' })
  })
})
