const { test, expect } = require('@playwright/test')
const AxeBuilder = require('@axe-core/playwright').default

const { mockEveryThing } = require('../../uib-components/.utils/playwright/pw-api-mock')
mockEveryThing(test, expect)
// const { apiMock, cookieOpsiconfdSession } = require('../../uib-components/.utils/playwright/pw-api-mock')
// test.beforeEach(async ({ page, context }) => {
//   await page.unroute('**/api/**')
//   apiMock(page, '**/api/user/opsiserver', { result: 'testconfigserver.uib.local' })
//   await page.goto('./login')
//   // const title = page.locator('[data-testid="login_title"]')
//   // await expect(title).toHaveText('opsi-webgui')
//   await page.type('[placeholder="Username"]', 'adminuser')
//   await page.press('[placeholder="Username"]', 'Tab')
//   await page.type('[placeholder="Password"]', 'adminuser')
//   await page.press('[placeholder="Password"]', 'Enter')
//   apiMock(page, '**/api/auth/login', { result: 'Login success' })
//   await context.addCookies(cookieOpsiconfdSession)
//   const session = await context.cookies()
//   expect(session).toEqual(cookieOpsiconfdSession)
//   apiMock(page, '**/api/opsidata/depots/clients?selectedDepots=[testconfigserver.uib.local]', ['client1.uib.local', 'client2.uib.local', 'client3.uib.local', 'client4.uib.local', 'client5.uib.local'])
//   apiMock(page, '**/api/opsidata/depot_ids', ['testconfigserver.uib.local', 'depot1.uib.local', 'depot2.uib.local', 'depot3.uib.local'])
//   apiMock(page, '**/api/opsidata/clients?pageNumber=1&perPage=15&sortBy=clientId&sortDesc=false&filterQuery=&selected=&selectedDepots=["testconfigserver.uib.local"]&selectedClients=[]', [
//     { clientId: 'client1.uib.local', ident: 'client1.uib.local', macAddress: 'af:fe:af:fe:af:f1', description: '', notes: '', version_outdated: 0, installationStatus_unknown: 0, installationStatus_installed: 0, actionResult_failed: 0, actionResult_successful: 0, selected: 0 }
//   ])
//   await (new Promise(resolve => setTimeout(resolve, 2000)))
//   await expect(page).toHaveURL('/addons/webgui/app/clients/')
// })

// test.afterEach(async ({ page }) => {
//   apiMock(page, '**/api/auth/logout', { result: 'logout success' }, 'POST')
//   await page.click('[data-testid="ButtonBTNLogout"]')
//   page.setDefaultTimeout(55555)
//   await expect(page).toHaveURL('/addons/webgui/app/login')
//   await page.close()
// })

test.describe('accessibility', () => {
  test('topbar', async ({ page }) => {
    const accessibilityScanResults = await new AxeBuilder({ page })
      .withTags(['wcag2a', 'wcag2aa', 'wcag21a', 'wcag21aa'])
      .include('[data-testid="BarBTop"]')
      .analyze()
    expect(accessibilityScanResults.violations).toEqual([])
  })

  test('sidebar', async ({ page }) => {
    const accessibilityScanResults = await new AxeBuilder({ page })
      .withTags(['wcag2a', 'wcag2aa', 'wcag21a', 'wcag21aa'])
      .include('[data-testid="BarBSide"]')
      .analyze()
    expect(accessibilityScanResults.violations).toEqual([])
  })

  test('clients', async ({ page }) => {
    const accessibilityScanResults = await new AxeBuilder({ page })
      .withTags(['wcag2a', 'wcag2aa', 'wcag21a', 'wcag21aa'])
      .include('[data-testid="VClients"]')
      .analyze()
    expect(accessibilityScanResults.violations).toEqual([])
  })
  test('clients - creation', async ({ page }) => {
    await page.click('[data-testid="NICollapsible-title.clients"]')
    await page.click('[data-testid="NICollapsible-submenu-title.clientstitle.addNew"]')
    await (new Promise(resolve => setTimeout(resolve, 4000)))
    await expect(page).toHaveURL('/addons/webgui/app/clientscreation')
    const accessibilityScanResults = await new AxeBuilder({ page })
      .withTags(['wcag2a', 'wcag2aa', 'wcag21a', 'wcag21aa'])
      .include('[data-testid="VClientCreation"]')
      .analyze()
    expect(accessibilityScanResults.violations).toEqual([])
  })
  test('clients - config with active Atrributes tab', async ({ page }) => {
    await page.click('[data-testid="NICollapsible-title.clients"]')
    await page.click('[data-testid="NICollapsible-submenu-title.clientstitle.config"]')
    await (new Promise(resolve => setTimeout(resolve, 4000)))
    await expect(page).toHaveURL('/addons/webgui/app/clientsconfig')
    const accessibilityScanResults = await new AxeBuilder({ page })
      .withTags(['wcag2a', 'wcag2aa', 'wcag21a', 'wcag21aa'])
      .include('[data-testid="VConfig"]')
      .analyze()
    expect(accessibilityScanResults.violations).toEqual([])
  })
  test('clients - parameters', async ({ page }) => {
    await page.click('[data-testid="NICollapsible-title.clients"]')
    await page.click('[data-testid="NICollapsible-submenu-title.clientstitle.config"]')
    await expect(page).toHaveURL('/addons/webgui/app/clientsconfig')
    await (new Promise(resolve => setTimeout(resolve, 4000)))
    await page.click('[data-testid="Parameters"]')
    await (new Promise(resolve => setTimeout(resolve, 4000)))
    const accessibilityScanResults = await new AxeBuilder({ page })
      .withTags(['wcag2a', 'wcag2aa', 'wcag21a', 'wcag21aa'])
      .include('[data-testid="GHostParam"]')
      .analyze()
    expect(accessibilityScanResults.violations).toEqual([])
  })
  test('groups with a selected group', async ({ page }) => {
    await page.click('[data-testid="NIItem-title.groups"]')
    await expect(page).toHaveURL('/addons/webgui/app/groups/')
    await (new Promise(resolve => setTimeout(resolve, 1000)))
    await page.getByText('clientdirectory').click()
    await (new Promise(resolve => setTimeout(resolve, 1000)))
    const accessibilityScanResults = await new AxeBuilder({ page })
      .withTags(['wcag2a', 'wcag2aa', 'wcag21a', 'wcag21aa'])
      .include('[data-testid="VGroups"]')
      .analyze()
    expect(accessibilityScanResults.violations).toEqual([])
  })
  test('products', async ({ page }) => {
    await page.click('[data-testid="NIItem-title.products"]')
    await expect(page).toHaveURL('/addons/webgui/app/products/')
    const accessibilityScanResults = await new AxeBuilder({ page })
      .withTags(['wcag2a', 'wcag2aa', 'wcag21a', 'wcag21aa'])
      .include('[data-testid="VProducts"]')
      .analyze()
    expect(accessibilityScanResults.violations).toEqual([])
  })
})
